/**
 * ESBuild Configuration File
 * ========================
 * 
 * C·∫•u h√¨nh build cho CLI tool s·ª≠ d·ª•ng ESBuild.
 * H·ªó tr·ª£ c·∫£ development mode (watch) v√† production build.
 * 
 * @author CLI Utils Team
 * @version 1.0.0
 */

import esbuild from 'esbuild';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import fs from 'fs';
import { createRequire } from 'module';

const require = createRequire(import.meta.url);
const packageJson = require('./package.json');

// Chuy·ªÉn ƒë·ªïi import.meta.url th√†nh ƒë∆∞·ªùng d·∫´n file th·ª±c t·∫ø
// C·∫ßn thi·∫øt cho ES modules ƒë·ªÉ l·∫•y __dirname v√† __filename
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// X√°c ƒë·ªãnh m√¥i tr∆∞·ªùng build
const isProduction = process.env.NODE_ENV === 'production';
const isDev = process.argv.includes('--dev'); // Flag ƒë·ªÉ b·∫≠t development mode

/**
 * L√†m s·∫°ch th∆∞ m·ª•c dist tr∆∞·ªõc khi build
 * ƒê·∫£m b·∫£o build m·ªõi ho√†n to√†n s·∫°ch
 */
const distDir = join(__dirname, 'dist');
if (fs.existsSync(distDir)) {
  fs.rmSync(distDir, { recursive: true, force: true });
}

const allDependencies = [
  ...Object.keys(packageJson.dependencies || {}),
  ...Object.keys(packageJson.devDependencies || {}),
  ...Object.keys(packageJson.peerDependencies || {}),
  ...Object.keys(packageJson.optionalDependencies || {})
];

/**
 * C·∫•u h√¨nh build options cho ESBuild
 * ƒê·ªãnh nghƒ©a c√°ch th·ª©c bundle v√† optimize code
 */
const buildOptions = {
  // Entry point - file TypeScript ch√≠nh c·∫ßn build
  entryPoints: ['src/cli.ts'],
  
  // Bundle t·∫•t c·∫£ dependencies v√†o m·ªôt file duy nh·∫•t
  bundle: true,
  
  // Target platform - Node.js (kh√¥ng ph·∫£i browser)
  platform: 'node',
  
  // Phi√™n b·∫£n Node.js t·ªëi thi·ªÉu h·ªó tr·ª£
  target: 'node16',
  
  // Format output - ES modules
  format: 'esm',
  
  // File output cu·ªëi c√πng
  outfile: 'dist/cli.js',
  
  /**
   * External dependencies - kh√¥ng bundle v√†o file cu·ªëi
   * C√°c packages n√†y s·∫Ω ƒë∆∞·ª£c require/import t·∫°i runtime
   * Gi√∫p gi·∫£m k√≠ch th∆∞·ªõc bundle v√† tr√°nh conflict
   */
  external: allDependencies,
  
  /**
   * Shebang banner - ƒë√£ comment out
   * N·∫øu b·∫≠t s·∫Ω th√™m #!/usr/bin/env node v√†o ƒë·∫ßu file
   * Cho ph√©p ch·∫°y tr·ª±c ti·∫øp nh∆∞ executable
   */
//   banner: {
//     js: '#!/usr/bin/env node\n'
//   },

  // Source maps - ch·ªâ t·∫°o khi kh√¥ng ph·∫£i production
  sourcemap: !isProduction,
  
  // Minification - ch·ªâ b·∫≠t khi production
  minify: isProduction,
  
  // Gi·ªØ nguy√™n t√™n function/class ƒë·ªÉ d·ªÖ debug
  keepNames: true,
  
  // File c·∫•u h√¨nh TypeScript
  tsconfig: 'tsconfig.json',
  
  // M·ª©c ƒë·ªô logging
  logLevel: 'info'
};

/**
 * H√†m build ch√≠nh
 * X·ª≠ l√Ω c·∫£ development mode (watch) v√† production build
 */
async function build() {
  try {
    if (isDev) {
      /**
       * Development Mode - Watch Mode
       * =============================
       * 
       * T·ª± ƒë·ªông rebuild khi c√≥ thay ƒë·ªïi file
       * Ph√π h·ª£p cho development v√† testing
       */
      console.log('üîÑ Starting development build with watch mode...\n');
      
      // T·∫°o context ƒë·ªÉ c√≥ th·ªÉ watch changes
      const ctx = await esbuild.context(buildOptions);
      await ctx.watch();
      
      console.log('üëÄ Watching for changes... Press Ctrl+C to stop.\n');
      
      /**
       * X·ª≠ l√Ω graceful shutdown
       * ƒê·∫£m b·∫£o cleanup context khi tho√°t
       */
      process.on('SIGINT', async () => {
        console.log('\nüõë Stopping watch mode...');
        await ctx.dispose();
        process.exit(0);
      });
      
    } else {
      /**
       * Production Build Mode
       * ====================
       * 
       * Build m·ªôt l·∫ßn v√† tho√°t
       * Optimize cho production deployment
       */
      console.log(`üöÄ Building CLI tool for ${isProduction ? 'production' : 'development'}...\n`);
      
      // Th·ª±c hi·ªán build
      const result = await esbuild.build(buildOptions);
      
      /**
       * Ki·ªÉm tra l·ªói build
       * N·∫øu c√≥ l·ªói, hi·ªÉn th·ªã v√† tho√°t v·ªõi exit code 1
       */
      if (result.errors.length > 0) {
        console.error('‚ùå Build failed with errors:');
        result.errors.forEach(error => console.error(error));
        process.exit(1);
      }
      
      /**
       * L√†m file executable tr√™n Unix systems
       * Windows kh√¥ng c·∫ßn chmod
       */
      if (process.platform !== 'win32') {
        fs.chmodSync('dist/cli.js', '755');
      }
      
      /**
       * Hi·ªÉn th·ªã th√¥ng tin build th√†nh c√¥ng
       * Bao g·ªìm ƒë∆∞·ªùng d·∫´n file v√† k√≠ch th∆∞·ªõc
       */
      console.log('‚úÖ Build completed successfully!');
      console.log(`üì¶ Output: dist/cli.js`);
      console.log(`üóúÔ∏è  Size: ${(fs.statSync('dist/cli.js').size / 1024).toFixed(2)} KB\n`);
    }
    
  } catch (error) {
    /**
     * X·ª≠ l√Ω l·ªói build kh√¥ng mong mu·ªën
     * Log error v√† tho√°t v·ªõi exit code 1
     */
    console.error('‚ùå Build failed:', error);
    process.exit(1);
  }
}

// Kh·ªüi ch·∫°y build process
build();